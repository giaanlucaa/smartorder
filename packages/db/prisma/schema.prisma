generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Venue {
  id            String          @id @default(cuid())
  name          String
  slug          String          @unique @default("")
  currency      String          @default("CHF")
  vatRates      Json
  address       String?
  themeColor    String?
  logoUrl       String?
  coverImageUrl String?
  isActive      Boolean         @default(true)
  settings      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  invoiceSeq    Int             @default(0)
  areas         Area[]
  checkouts     Checkout[]
  categories    MenuCategory[]
  orders        Order[]
  tables        Table[]
  users         UserVenueRole[]

  @@index([name])
  @@index([slug])
  @@index([isActive])
}

model Area {
  id      String  @id @default(cuid())
  name    String
  venueId String
  venue   Venue   @relation(fields: [venueId], references: [id])
  tables  Table[]
}

model Table {
  id        String     @id @default(cuid())
  label     String
  areaId    String
  venueId   String
  qrToken   String     @unique
  checkouts Checkout[]
  orders    Order[]
  area      Area       @relation(fields: [areaId], references: [id])
  venue     Venue      @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([areaId])
}

model MenuCategory {
  id       String     @id @default(cuid())
  venueId  String
  name     String
  position Int        @default(0)
  venue    Venue      @relation(fields: [venueId], references: [id])
  items    MenuItem[]

  @@unique([venueId, name], name: "venueId_name")
}

model MenuItem {
  id          String        @id @default(cuid())
  categoryId  String
  name        String
  description String?
  price       Decimal       @db.Money
  taxRate     Decimal       @db.Decimal(5, 2)
  allergens   String[]
  imageUrl    String?
  isActive    Boolean       @default(true)
  category    MenuCategory  @relation(fields: [categoryId], references: [id])
  options     OptionGroup[]
  orderItems  OrderItem[]
}

model OptionGroup {
  id       String         @id @default(cuid())
  itemId   String
  name     String
  required Boolean        @default(false)
  min      Int            @default(0)
  max      Int            @default(1)
  choices  OptionChoice[]
  item     MenuItem       @relation(fields: [itemId], references: [id])
}

model OptionChoice {
  id        String      @id @default(cuid())
  groupId   String
  label     String
  priceDiff Decimal     @db.Money
  group     OptionGroup @relation(fields: [groupId], references: [id])
}

model Order {
  id        String      @id @default(cuid())
  venueId   String
  tableId   String
  status    OrderStatus @default(DRAFT)
  total     Decimal     @db.Money
  tipAmount Decimal?    @db.Money
  taxTotal  Decimal     @db.Money
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  invoiceNo String?
  checkout  Checkout?
  table     Table       @relation(fields: [tableId], references: [id])
  venue     Venue       @relation(fields: [venueId], references: [id])
  items     OrderItem[]
  payments  Payment[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  itemId    String
  qty       Int
  unitPrice Decimal  @db.Money
  modifiers Json
  item      MenuItem @relation(fields: [itemId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  provider        String
  providerRef     String?
  providerEventId String?       @unique
  status          PaymentStatus @default(CREATED)
  amount          Decimal       @db.Money
  raw             Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
}

model Checkout {
  id           String         @id @default(cuid())
  venueId      String
  tableId      String
  orderId      String?        @unique
  status       CheckoutStatus @default(PENDING)
  cartData     Json
  totalAmount  Decimal        @db.Money
  taxAmount    Decimal        @db.Money
  tipAmount    Decimal?       @db.Money
  sessionId    String?        @unique
  expiresAt    DateTime?
  completedAt  DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  order        Order?         @relation(fields: [orderId], references: [id])
  table        Table          @relation(fields: [tableId], references: [id])
  venue        Venue          @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([tableId])
  @@index([status])
  @@index([sessionId])
}

model User {
  id        String          @id @default(cuid())
  email     String          @unique
  name      String?
  password  String
  isActive  Boolean         @default(true)
  lastLogin DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
  roles     UserVenueRole[]
}

model UserVenueRole {
  id      String @id @default(cuid())
  userId  String
  venueId String
  role    String
  user    User   @relation(fields: [userId], references: [id])
  venue   Venue  @relation(fields: [venueId], references: [id])

  @@unique([userId, venueId], name: "user_venue_unique")
  @@index([venueId, role])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  venueId   String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
}

enum OrderStatus {
  DRAFT
  OPEN
  PAID
  CANCELLED
  FULFILLED
}

enum PaymentStatus {
  CREATED
  PENDING
  AUTHORIZED
  SETTLED
  FAILED
  CANCELED
}

enum CheckoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}
